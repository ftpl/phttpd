#!/bin/perl -W
# coding: utf-8
# todo: PUT/POST.string/POST.largeFile/Range.[Up||Down]Load/
#		fsIn/fsOut -> charguess
use strict;
use warnings;
use Socket;
#use IO::Socket::INET;
use IO::Socket::IP;
use IO::Select;
use Sys::Hostname;
use Encode;
use Encode::Guess;
use POSIX qw(strftime);

my $ver = '20250224.1420'; my $host = hostname;
my $srv = "Pure-Static-HTTPd-$ver @ $host";
my $addr = '::'; # 服务器的IP地址, 绑定到 'localhost' 则只允许本机访问
my $port = 58080; # 服务器监听的本地端口号
my $wwwroot = '.'; # 服务器根目录, '.'表示根目录为当前$(pwd)或%CD%文件夹
my $uploadurl = "/ul"; # 上传文件夹的web路径, 客户端请求此url时返回一个上传页面
my $uploadpath = $wwwroot . $uploadurl; # 上传文件夹在文件系统中的路径, 比如: /tmp/upload
my $indexmode = 1; # 是否自动索引文件列表(autoindex)
my $fixmode = 1; # 页面修复模式总开关, 决定是否修改内容后再输出

# log.control:
my $infomode = 1; # 显示请求头/响应头和简单响应体(p header,rc.html)
my $dbgtext = 0; # 显示get响应的文本类型文件内容(pt js,css,html,text)
my $dbgbinary = 0; # 显示get响应的二进制文件内容(pb binary-file)
my $dbgpayload = 0; # 显示post上传的请求体和解析出的文件内容(pp payload,content)

# 使用第一个参数作为端口号
if (@ARGV && $ARGV[0] =~ /^\d+$/ && $ARGV[0] >= 1 && $ARGV[0] <= 65535){ $port = $ARGV[0]; }

sub p { if ($infomode == 1) { my ($v) = @_; print $v; } }
sub pt { if ($dbgtext == 1) { my ($v) = @_; print $v; } }
sub pb { if ($dbgbinary == 1) { my ($v) = @_; print $v; } }
sub pp { if ($dbgpayload == 1) { my ($v) = @_; print $v; } }

my %codes = (
'200', 'OK',
'201', 'Created',
'202', 'Accepted',
'204', 'No Content',
'301', 'Moved Permanently',
'302', 'Moved Temporarily',
'304', 'Not Modified',
'400', 'Bad Request',
'401', 'Unauthorized',
'403', 'Forbidden',
'404', 'Not Found',
'500', 'Internal Server Error',
'501', 'Not Implemented',
'502', 'Bad Gateway',
'503', 'Service Unavailable',
);

my $lstHeader = << 'HEADER_TEXT';
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<style type="text/css">
* { 
background:#000000; color:white; font-size:100%;
font-family: "Microsoft YaHei", "微软雅黑", "宋体", SimSun, monospace; 
}
A:link { text-decoration:none; }
A:visited{ text-decoration:none; color:#d0d0d0; }
A:hover { text-decoration:none; color:lightgreen; }
A:active { color:#ff0000; }
table { border-collapse: collapse; }
tr { border-bottom: 1px solid gray; }
th, td { padding: 0 4px; }
th, #up, #num { background-color: inherit; color:lightgreen; font-size:110%; position:sticky; top:0; z-index:1; }
th:focus, #up:focus, th:active, #up:active { background-color: gray; outline: none; }
tr td:nth-child(1) { word-wrap: break-word; word-break: break-all; }
/*
tr td:nth-child(2) { min-width: 10ch; text-align:right; }
tr td:nth-child(3) { min-width: 10ch; text-align:right; }
*/
tr td:nth-child(2) { max-width: 20%; text-align:right; }
tr td:nth-child(3) { max-width: 20%; text-align:right; }
</style>
</head>

<body>
<table>
<thead>
<tr id="tag"><th>Name</th><th>Size</th><th>Time</th></tr>
</thead>
<tbody id="lst">
HEADER_TEXT

my $lstFooter = << 'FOOTER_TEXT';
</tbody>
</table>

<table id="tmp" style="display:none"></table>

<script type="text/javascript">
function $(id){return document.getElementById(id);}

var vOrder='ab';
var aList = Array.from($('lst').getElementsByTagName('tr'));
var dList = Array.from(aList).filter(row => { var link = row.querySelector('td > a[href$="/"]'); return link !== null; });
var fList = Array.from(aList).filter(row => { var link = row.querySelector('td > a:not([href$="/"])'); return link !== null; });

function updir(){ location.href='../'; }

function reCount(){
  let a = Array.from($('lst').getElementsByTagName('a'));
  let d = Array.from(a).filter(row => { return row.href.substr(-1)=='/'; });
  let f = Array.from(a).filter(row => { return row.href.substr(-1)!='/'; });
  $('num').innerHTML=a.length + ' : ' + d.length + ' + ' + f.length;
}

function search(exp){
  if ((event.keyCode != 27) && exp.length >= 1){
    var regex = new RegExp(eval('/'+exp+'/i'));
    aList.forEach(item => {
        if (regex.test(item.textContent)){
          $('lst').appendChild(item);
        } else {
          $('tmp').appendChild(item);
        }
    });
  } else {
    if (event.keyCode == 27 || exp == ''){
      Array.from($('tmp').getElementsByTagName('tr')).forEach(item => { $('lst').appendChild(item); });
    }
  }
  reCount();
}

function reOrder() {
  vOrder = (vOrder=='ab') ? 'ba' : 'ab';
}

function orderVal(elm,flag){
  if (flag==1){
    return elm.getElementsByTagName('td')[flag].getAttribute('title');
  } else {
    return elm.getElementsByTagName('td')[flag].textContent.toLowerCase();
  }
}

function naturalSort(a, b) {
  const regex = /(\d+)|(\D+)/g;
  const aParts = a.toLowerCase().match(regex);
  const bParts = b.toLowerCase().match(regex);
  for (let i = 0; i < Math.min(aParts.length, bParts.length); i++) {
    const aPart = aParts[i];
    const bPart = bParts[i];
    if (/\d+/.test(aPart) && /\d+/.test(bPart)) {
      const aNum = parseInt(aPart, 10);
      const bNum = parseInt(bPart, 10);
      if (aNum !== bNum) {
        return aNum - bNum;
      }
    } else {
      if (aPart !== bPart) {
        return aPart.localeCompare(bPart);
      }
    }
  }
  return aParts.length - bParts.length;
}

function reSort(elm,val){
  var olist=Array.from(elm);
  olist.sort((a, b) => {
    var aVal = orderVal(a, val);
    var bVal = orderVal(b, val);
    return (vOrder == 'ab') ? naturalSort(aVal, bVal) : naturalSort(bVal, aVal);
  });
  olist.forEach(row => row.parentNode.appendChild(row));
}

function fmtSize(bytes) {
    if (bytes >= 1099511627776) {
        return (bytes / 1099511627776).toFixed(2) + ' TB';
    } else if (bytes >= 1073741824) {
        return (bytes / 1073741824).toFixed(2) + ' GB';
    } else if (bytes >= 1048576) {
        return (bytes / 1048576).toFixed(2) + ' MB';
    } else if (bytes >= 1024) {
        return (bytes / 1024).toFixed(2) + ' KB';
    } else if (bytes=='-'){
        return '-';
    } else {
        return bytes + ' .B';
    }
}

function fmtStr(sizeStr) {
  const units = { 'KB': 1024, 'MB': 1024 ** 2, 'GB': 1024 ** 3, 'TB': 1024 ** 4, 'KiB': 1024, 'MiB': 1024 ** 2, 'GiB': 1024 ** 3, 'TiB': 1024 ** 4 };
  if (sizeStr.trim() === '-' || sizeStr.trim() === '') { return '-'; }
  const mch = sizeStr.match(/^(\d+(\.\d+)?)\s*(Ki?B|Mi?B|Gi?B|Ti?B)$/i);
  if (!mch) { console.error('无效的输入格式:', sizeStr); return '-'; }
  const number = parseFloat(mch[1]); const unit = mch[3].toUpperCase();
  if (!units[unit]) { console.error('无效的单位:', unit); return '-'; }
  return number * units[unit];
}

aList.forEach(item => {
    var n=item.getElementsByTagName('td')[1];
    if (n.hasAttribute('title')){
      n.innerHTML=fmtSize(n.getAttribute('title'));
    }
});

var t=$('tag').getElementsByTagName('th'); for (var i=0;i<t.length;i++){ t[i].setAttribute('onclick','reOrder();reSort(dList, '+i+');reSort(fList, '+i+');'); }

if (window.$('s')==null){
  var s=document.createElement('p'); s.id='s';
s.innerHTML = '<b id="up" onclick="updir()">❮❮❮❮❮</b> <input size="12" onkeyup="search(this.value)"> [ <b id="num"></b> ]';
  document.body.insertBefore(s,document.body.firstChild);
}

reCount();

</script>
</body>
</html>
FOOTER_TEXT

sub ti {
	my $formatted_time = strftime('%Y-%m-%d.%H:%M:%S', localtime);
	return $formatted_time;
}

sub rf {
	my ($filename) = @_;
	open my $fh, '<', $filename or die "Cannot open file: $!";
	my $content = do { local $/; <$fh> };
	close $fh;
	return $content;
}

sub rc { 
	my ($out, $code, $detail) = @_;
	my $msg = "$code " . $codes{$code};
	my $header = "HTTP/1.1 $msg\r\nContent-type: text/html\r\n\r\n";
	my $html = "<!DOCTYPE html>\n<html>\n<HEAD>\n<TITLE>$msg</TITLE>\n";
	$html .= "<META http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\n</HEAD>\n";
	$html .= "<body>\n<h1>$msg</h1>\n<h2><I>$srv</I> : <br><br>\n$detail</h2>\n</body>\n</html>\n";
	print $out "$header" . "$html" . "";
	p "$header" . "$html" . "\n";
}

sub fsOut {
	my ($str) = @_;
	if ("$^O" eq "msys" || "$^O" eq "MSWin32") {
		my $str_uni = decode("gbk", $str); $str = encode("utf-8", $str_uni);
	}
	return $str;
}

sub fsIn {
	my ($str) = @_;
	if ("$^O" eq "msys" || "$^O" eq "MSWin32") {
		my $str_uni = decode("utf-8", $str); $str = encode("gbk", $str_uni);
	}
	return $str;
}

sub encodeuri {
	my ($str) = @_;
	$str =~ s/([^a-zA-Z0-9_.!~*'()\-\/])/sprintf("%%%02X", ord($1))/ge;
	return $str;
}

sub decodeuri {
	my ($str) = @_;
	$str =~ s/%([a-fA-F0-9][a-fA-F0-9])/pack("C", hex($1))/eg;
	return $str;
}

sub chartype {
	my ($str) = @_;
	my $curcode = "utf-8";
	eval {
		Encode::decode("utf-8", $str, Encode::FB_CROAK);
	};
	if ($@) {
		$curcode = "gbk";
	}
	return $curcode;
}

sub charguess {
	my ($str) = @_;
	my $curcode = "gbk";
	my $decoder = Encode::Guess->guess($str);
	if (ref $decoder) {
		$curcode = $decoder->name;
	}
	if ("$curcode" eq "utf8") { $curcode = "utf-8"; }
	return $curcode;
}

sub mimeguess {
	my ($file) = @_;
	if (-T $file) {
		if (rf($file) =~ /^(\xef\xbb\xbf|\xfe\xff|\xff\xfe)?[\n\r\s\t\']*<[^>]+>/is) {
			return "text/html";
		} else {
			return "text/plain";
		}
	} else {
		return 'application/octet-stream';
	}
}

sub dir {
	my ($odir) = @_;
	opendir(my $odh, $odir) or die "Can't open directory $odir: $!";
	my @ofiles = readdir($odh);
	closedir($odh);
	@ofiles = sort { lc($a) cmp lc($b) } @ofiles;
	my @dresult; my @fresult;
	foreach my $ofile (@ofiles) {
		my $opath = "$odir/$ofile";
		my $osize = -d $opath ? '-' : -s $opath;
		my $omtime = -M $opath;
		my $odate = strftime('%Y-%m-%d %H:%M:%S', localtime((stat($opath))[9]));
		if (-d $opath){
			push @dresult, sprintf("%-30s %10s %25s", '<tr><td><a href="./' . $ofile . '/">' . "$ofile" . '/</a></td>', '<td title="' . "$osize" . '"></td>', '<td>' . "$odate" . '</td></tr>');
		} else {
			push @fresult, sprintf("%-30s %10s %25s", '<tr><td><a href="./' . $ofile . '">' . "$ofile" . '</a></td>', '<td title="' . "$osize" . '"></td>', '<td>' . "$odate" . '</td></tr>');
		}
	}
	push @dresult, @fresult;
	return @dresult;
}

sub lazyfix {
my ($html) = @_;
$html =~ s/checktime\(\)\;/\/\/nochecktime\(\)\;/gi;
$html =~ s/window\._stat_params \= \{/delwindow\._stat_params \= \{/gi;
$html =~ s/https?\:\/\/\d+\.\d+\.\d+\.\d+\:\d+\//\//gi;
$html =~ s/\<\/head\>/\<script type=\"text\/javascript\" src=\"\/content\/js\/c.fix.menu.js\"\>\<\/script\>\n\<\/head\>/i;
$html =~ s/\<\/body\>/\<script type=\"text\/javascript\" src=\"\/content\/js\/c.fix.footer.js\"\>\<\/script\>\n\<\/body\>/i;
return $html;
}

# 创建监听套接字
my $server = IO::Socket::IP->new(
	LocalAddr => $addr,
	LocalPort => $port,
	Type      => SOCK_STREAM,
	Reuse     => 1,
	Listen    => 10,
) or die "Cannot create socket: $!";

my $select = IO::Select->new($server); # 创建 IO::Select 对象并添加监听套接字

print ti . "\n$srv is running on $addr:$port\n";

while (1) {
	my @ready = $select->can_read; # 非阻塞地等待读取事件

	foreach my $fh (@ready) {
		if ($fh == $server) {
			# 监听套接字有新连接
			my $client = $server->accept();
			$select->add($client); # 添加新连接到 IO::Select 对象中
		} else {
			# 客户端套接字有数据可读
			my $client = $fh;
			my $client_address = $client->peerhost();
			my $client_port = $client->peerport();

			# 读取客户端请求
			print "\n*REQ <<from $client_address:$client_port [" . ti . "]\n";
			# 读取 HTTP 请求头
			my $request = '';
			while (my $line = <$client>) {
				$request .= $line;
				last if $line =~ /^\r\n$/; # 请求头部结束标志
			}
			p "\n$request\n";

			# 解析请求行
			my ($method, $path) = split /\s+/, $request; if (!defined $path) { my $path="/"; } else { print "\n# $method : $path\n\n"; }
			$path = fsIn(decodeuri($path)); # 将网页编码的字符串解码成文件系统编码
			my ($rqurl, $search) = split /\?/, $path; if (!defined $search) { my $search=""; } else { p "\n#search : $search\n\n"; }
			##my ($qname, $qval) = split /\=/, $search; if (!defined $qname) { my $qname=""; } if (!defined $qval) { my $qval=""; } else { p "\nqval: $qval\n"; }

			# 开始响应请求
			print "\n*RESP >>to $client_address:$client_port [" . ti . "]\n\n";

			if ( $method eq 'PUT') {
			#* 处理 PUT 请求:
				# 发送 HTTP 501 响应
				rc($client, '501',"Not supported method: " . $method);
			} elsif ( $method eq 'POST' ) {
			#* 处理 POST 请求:
			#p "\n\n" . $request . "\n\n";
				my ($boundary) = $request =~ /Content-Type:\s*multipart\/form-data;\s*boundary=(\S+)/i;
				p "\n\n========== \$boundary: $boundary \n";
				if ($boundary && $request =~ /Content-Length:\s*(\d+)/ ) {
					# 从请求体中解析出 $payload
					my $length = $1;
					my $read = 0;
					my $payload = '';
					while ($read < $length) {
						my $data = '';
						my $bytes = $client->read($data, $length - $read);
						last if $bytes == 0; # End of payload
						$payload .= $data;
						$read += $bytes;
					}
					pp "\n\n========== \$payload.start ==========\n$payload\n========== \$payload.end ==========\n\n";

					# 从 $payload 中提取每个文件名和对应的文件内容, 将获取的匹配插入 @files 数组中
					my (@files) = ();
					while ($payload =~ /(?=--$boundary[\r\n]+)?Content-Disposition:\s*form-data;\s*name=\"([^\"]+)\";\s*filename=\"([^\"]+)\"[\r\n]+Content-Type:\s*(.*?)[\n\r]{4}(.*?)[\r\n]--$boundary/sg) {
						my $name = $1;
						my $filename = fsIn($2);
						my $content = $4;
						push @files, {
							name => $name,
							filename => $filename,
							content => $content
						};
						p "\n\n========== \$filename: $filename \n\n";
						pp "\n\n========== \$content.start ==========\n$content\n========== \$content.end ==========\n\n";
					}
					# 保存文件并生成上传成功的文件列表
					my $okfiles = '';
					for my $file (@files) {
						if ($file->{filename} && $file->{content}) {
							# 保存上传的文件
							my $filepath = $uploadpath . "/" . $file->{filename};
							eval {
								open my $fh, '>', $filepath or die "Cannot open file '" . fsOut($filepath) . "': $!";
								binmode $fh;
								print $fh $file->{content};
								close $fh;
							};
							if ($@) {
								# 发送 HTTP 500 响应
								rc($client, '500', "$@\n<br>Cannot save file to '" . fsOut($filepath) . "'");
								last;
							} else {
								# 将上传成功的文件名添加到列表
								$okfiles .= "\n<hr>" . fsOut($file->{filename}) . "";
								print "\nFile uploaded: '" . fsOut($filepath) . "'\n\n";
							}
						} else {
							# 解析失败，发送 400 响应
							rc($client, '400', "err uploading file: " . fsOut($file->{filename}) . "\n<br>Cannot analyze \$header or \$payload.");
							last;
						}
					}
					
					if ("$okfiles" ne "") {
					# 发送上传成功的响应
						rc($client, '200', "\n\nUploaded files:<br>\n$okfiles\n<hr>");
					}
				}
			} elsif ( $method eq 'GET' ) {
			#* 处理 GET 请求:
				# 干掉用于伪动态传参的 url?location.search 字段, 防止报错找不到文件
				if ( $path =~ m/\?.*/ ) { $path =~ s/\?.*//g; }
				my $file = $wwwroot . $path;
				my $mime_type = 'text/html';
				my $char_set = '';
				# 响应头和编码指定逻辑:
				# 1.除js/css/image外的文件类型全靠猜;
				# 2.js/css/html编码指定空值,客户端遵照网页代码解析;
				# 3.其它text型文件编码全靠猜, 猜不出来就当成gbk;
				if ($file =~ /\.js$/i) {
					$mime_type = 'text/javascript';
				} elsif ($file =~ /\.css$/i) {
					$mime_type = 'text/css';
				} elsif ($file =~ /\.(jpg|jpeg|bmp|png|gif|tiff?)$/i) {
					$mime_type = 'image/*';
				} else {
					$mime_type = mimeguess($file);
				}

				# 处理请求
				if( $path eq $uploadurl ) {
					# 创建上传页面
					rc($client, '200', '<form method="POST" action="' . $uploadurl . '" enctype="multipart/form-data" id="file"><input type="file" name="file" multiple="multiple"><input type="submit"></form>');
				} elsif (-e $file && -f $file) {
					# 生成文件内容
					open my $fh, '<', $file or die "Cannot open file: $!";
					my $cat="";
					while (my $line = <$fh>) {
						$cat .= "$line";
					}
					close $fh;
					# 猜文本编码, 猜不出来就当成gbk来处理
					if ($mime_type eq 'text/plain') {
						$char_set = charguess("$cat");
					}
					# 开启页面修复模式时预处理文本
					if ($fixmode == 1 && $mime_type eq 'text/html' && $path =~ /\@/ ) {
						$cat = lazyfix($cat);
					}
					# 生成 HTTP 响应头
					my $resp = "HTTP/1.1 200 OK\r\n";
					$resp .= "Content-Type: $mime_type; charset=$char_set\r\n\r\n";
					#$resp .= "Content-Length: " . length($cat) . "\r\n";
					print $client $resp . $cat;
					p $resp;
					if ($mime_type =~ /^text/i){
						pt $cat;
					} else {
						pb $cat;
					}
				} elsif (-e $file && -d $file) {
					if ($indexmode == 1) {
						my @files=dir($file); my $str=join("\n", @files);
            # rc($client, '200', "$lstHeader" . fsOut($str) . "\n$lstFooter");
            my $header="HTTP/1.1 200 OK\r\nContent-type: text/html\r\n\r\n";
            my $html="$lstHeader" . fsOut($str) . "\n$lstFooter";
            print $client "$header" . "$html";
	          pt "$header" . "$html" . "\n";
					} else {
						# 发送 HTTP 403 响应
						rc($client, '403', "auto index err.");
					}
				} else {
					# 发送 HTTP 404 响应
					rc($client, '404', "$file");
				} # GET 请求处理完毕
			} else {
			#* 处理未知请求:
				# 发送 HTTP 501 响应
				rc($client, '501', "Not supported method: $method");
			}
			# 关闭客户端连接
			$select->remove($client); # 从 IO::Select 对象中移除客户端套接字
			close $client;
		}
	}
}
